#include<iostream>
using namespace std;
#include<vector>
#include<algorithm>
/*
给你一个 无重复元素 的整数数组 candidates 和一个目标整数 target ，找出 candidates 
中可以使数字和为目标数 target 的 所有 不同组合 ，并以列表形式返回。你可以按 任意顺序 返回这些组合。

candidates 中的 同一个 数字可以 无限制重复被选取 。如果至少一个数字的被选数量不同，
则两种组合是不同的。 

对于给定的输入，保证和为 target 的不同组合数少于 150 个。
*/

class Solution {
public:
    vector<int> v1;
    int sum = 0;
    vector<vector<int>> result;
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        sort(candidates.begin(),candidates.end());
        backtracking(candidates,target,0);
        return result;
    }
    void backtracking(vector<int>& canadidates, int target, int startindex){
        if(sum == target){
            result.push_back(v1);
            return;
        }
        if(sum > target) return;
        for(int i = startindex; i<canadidates.size(); i++){
            sum += canadidates[i];
            v1.push_back(canadidates[i]);
            backtracking(canadidates,target,i); //递归
            sum -= canadidates[i]; //回溯
            v1.pop_back();
        }
    }
};

